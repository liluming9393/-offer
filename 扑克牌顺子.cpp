//LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,想测测自己的手气,
//看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,
//他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。
//LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。
//解题思路：对数组进行排序，计数0的个数，从头开始找出需要插空的个数，与0的个数比较
#include<iostream>
#include<stdint.h>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<map>
#include<set>
#include<string>
#include<stack>
#include<queue>
using namespace std;
void Display_1D_Matrix(vector<int> & data);
void Display_2D_Matrix(vector<vector<int>> & data);
bool IsContinuous(vector<int> numbers);
int main()
{
	vector<int> numbers = { 1, 2, 3, 0, 0 };
	Display_1D_Matrix(numbers);
	bool result = IsContinuous(numbers);
	if (result)
	{
		cout << "true" << endl;
	}
	else
	{
		cout << "false" << endl;
	}
	system("pause");
	return 0;
}
void Display_1D_Matrix(vector<int> & data)
{
	if (data.size() == 0)
	{
		return;
	}
	for (int i = 0; i < data.size() - 1; i++)
	{
		cout << data[i] << " ";
	}
	cout << data[data.size() - 1] << endl;
}
void Display_2D_Matrix(vector<vector<int>> & data)
{
	if (data.size() == 0)
	{
		return;
	}
	for (int i = 0; i < data.size(); i++)
	{
		for (int j = 0; j < data[i].size() - 1; j++)
		{
			cout << data[i][j] << " ";
		}
		cout << data[i][data[i].size() - 1] << endl;
	}
}
bool IsContinuous(vector<int> numbers) 
{
	if (numbers.size() != 5)
	{
		return false;
	}
	sort(numbers.begin(), numbers.end());
	int count_zero = 0;
	int i = 0;
	while (numbers[i] == 0)
	{
		count_zero++;
		i++;
	}
	if (count_zero > 4)
	{
		return false;
	}
	int count_gap = 0;
	for (int k = i; k < numbers.size() - 1; k++)
	{
		if (numbers[k + 1] == numbers[k])
		{
			return false;
		}
		count_gap = count_gap + (numbers[k + 1] - numbers[k]) - 1;
	}
	if (count_gap <= count_zero)
	{
		return true;
	}
	return false;
}
